<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="/style.css">
        <title>Creche Planning</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment-with-locales.min.js"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.css" />
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.js"></script>
        <script src="/com_serveur.js" defer></script>
        <script src="/popup.js" defer></script>
    </head>
    <body>

        <header>
            <nav class="navbar">
                <ul class="nav-list">
                    <a id="lien" href="/">Accueil</a>
                    <li id="lien" class="menu-deroulant"><a href="#">Planning</a>
                        <ul class="sous">
                            <a href="#"><span class="hover-underline-animation">Planning enfants</span></a>
                            <a href="#"><span class="hover-underline-animation">Planning employes</span></a>
                        </ul>
                    </li>
                    <% if (profile != undefined) { %>
                        <a id="lien" href="/employes">Employés</a>
                        <a id="lien" href="/enfants">Enfants</a>
                        <div id="profile-container" class="profile-container">
                            <p><%= profile.username %></p>
                            <div class="popup" id="popup" style="display: none;">
                                <a id="profil" href="/inventaire"><span class="hover-underline-animation">Profil</span></a>
                                <a id="deconnexion" href="#" onclick="decoProfile()"><span class="hover-underline-animation">Sign out</span></a>
                            </div>
                        </div>
                    <% } else { %>
                        <a id="lien" href="#">Employés</a>
                        <a id="lien" href="#">Enfants</a>
                        <div class="log-container">
                            <a id="loginButton" class="case-button">LogIn</a>
                        </div>
                    <% } %>
                </ul>
            </nav>
        </header>

        <!---------------------------- POPUP / SEARCHBAR -------------------------------------->
            
        <div class="inscription" style="display: none;" id="inscription">
            <form class="Formin" action="/register" method="post">
                <h1 class="title_creation">Inscrivez-vous</h1>

                <label for="username">Nom d'utilisateur :</label>
                <input type="text" id="username" name="username" required>
                
                <label for="password">Mot de passe :</label>
                <input type="password" id="password" name="password" required>
                
                <button class="button_submit" type="submit">S'inscrire</button>
            </form>
            <button id="closepopup">Fermer</button>
        </div>
        
        <div id="loginPopup" style="display: none;">
            <form id="loginForm" action="/login" method="post">
                <h1 class="title_creation">Connectez-vous</h1>
                <!-- Ajoutez les champs nécessaires pour le formulaire de connexion -->
                <label for="usernameLog">Nom d'utilisateur:</label>
                <input type="text" id="usernameLog" name="usernameLog" required>
                
                <label for="passwordLog">Mot de passe:</label>
                <input type="password" id="passwordLog" name="passwordLog" required>
                
                <button class="button_login"  type="submit">Se connecter</button>
                <a id="a_login" onclick="popUp()" href="#">Nouvel utilisateur inscrit toi</a>
            </form>
            <button id="closePopup">Fermer</button>
        </div>

        
        <div id="calendar-container">
            <div id="calendar"></div>
        </div>
        

        <script>
        $(document).ready(function () {
            async function loadEmployees() {
                try {
                    const response = await $.ajax({
                        type: 'GET',
                        url: '/employees',
                    });
                    if (response.success && Array.isArray(response.events)) {
                        return response.events;
                    } else {
                        console.error('Erreur lors de la récupération des données des employés.');
                        return [];
                    }
                } catch (error) {
                    console.error('Erreur AJAX (Employees) : ', error);
                    return [];
                }
            }

            async function loadChildSchedules(childId) {
                try {
                    const response = await $.ajax({
                        url: '/childSchedules/' + childId,
                        method: 'GET',
                    });
                    if (response.success && Array.isArray(response.childSchedules)) {
                        return response.childSchedules;
                    } else {
                        console.error('Erreur lors de la récupération des horaires des enfants.');
                        return [];
                    }
                } catch (error) {
                    console.error('Erreur AJAX (Child Schedules) : ', error);
                    return [];
                }
            }

            function assignEmployeesToChildren(employees, childSchedules, events) {
                if (!employees || !Array.isArray(employees) || !childSchedules || !Array.isArray(childSchedules) || !events) {
                    console.error('Données d\'entrée invalides pour assignEmployeesToChildren');
                    return;
                }

                const assignedHours = {};
                const weeklyAssignedHours = {};

                function canAssignEmployee(employee, dayOfWeek, hour) {
                    if (!assignedHours[employee.id]) {
                        assignedHours[employee.id] = {};
                    }

                    if (!assignedHours[employee.id][dayOfWeek]) {
                        assignedHours[employee.id][dayOfWeek] = {};
                    }

                    if (!assignedHours[employee.id][dayOfWeek][hour]) {
                        assignedHours[employee.id][dayOfWeek][hour] = 0;
                    }

                    if (!weeklyAssignedHours[employee.id]) {
                        weeklyAssignedHours[employee.id] = 0;
                    }

                    if (weeklyAssignedHours[employee.id] + 1 <= employee.maxWeeklyHours) {
                        if (assignedHours[employee.id][dayOfWeek][hour] < 3) {
                            assignedHours[employee.id][dayOfWeek][hour]++;
                            weeklyAssignedHours[employee.id]++;
                            return true;
                        }
                    }

                    return false;
                }

                events.forEach(event => {
                    const titleParts = event.title.split(':');

                    if (titleParts.length > 1) {
                        const childId = titleParts[1] ? titleParts[1].trim() : null;

                        if (childId) {
                            const childSchedule = childSchedules.find(schedule => schedule.child_id === parseInt(childId, 10));

                            if (childSchedule) {
                                const { daycareHoursStart, daycareHoursEnd, dayOfWeek } = childSchedule;

                                employees.forEach(employee => {
                                    const startHour = daycareHoursStart;
                                    const endHour = daycareHoursEnd;

                                    for (let hour = startHour; hour < endHour; hour++) {
                                        if (canAssignEmployee(employee, dayOfWeek, hour)) {
                                            event.start = moment().isoWeekday(dayOfWeek).hour(daycareHoursStart).toDate();
                                            event.end = moment().isoWeekday(dayOfWeek).hour(daycareHoursEnd).toDate();
                                            event.title += ` - ${employee.name}`;
                                            break;
                                        }
                                    }
                                });
                            } else {
                                console.error('Aucun horaire de garde trouvé pour l\'enfant avec l\'ID ' + childId);
                            }
                        } else {
                            console.error('Le titre de l\'événement ne contient pas de childId valide.');
                        }
                    } else {
                        console.error('Le titre de l\'événement ne contient pas de séparateur ":".');
                    }
                });
            }

            async function initialize() {
                try {
                    const employees = await loadEmployees();
                    console.log('Employés récupérés :', employees);

                    const response = await $.ajax({
                        type: 'GET',
                        url: '/planning',
                    });

                    console.log('Réponse du planning :', response);

                    if (Array.isArray(employees) && Array.isArray(response.events)) {
                        const childId = extractChildIdFromEvents(response.events);
                        console.log('ID d\'enfant extrait :', childId);

                        if (childId) {
                            const childSchedules = await loadChildSchedules(childId);
                            console.log('Horaires des enfants :', childSchedules);

                            if (Array.isArray(childSchedules)) {
                                childSchedules.forEach(childSchedule => {
                                    const childEvent = {
                                        title: `Garde: ${childSchedule.child_id}`,
                                        start: moment().isoWeekday(childSchedule.dayOfWeek).set({ 'hour': childSchedule.daycareHoursStart }).toDate(),
                                        end: moment().isoWeekday(childSchedule.dayOfWeek).set({ 'hour': childSchedule.daycareHoursEnd }).toDate(),
                                        color: 'orange',
                                    };
                                    response.events.push(childEvent);
                                });

                                assignEmployeesToChildren(employees, childSchedules, response.events);

                                $('#calendar').fullCalendar({
                                    locale: 'fr',
                                    header: {
                                        left: 'prev,next today',
                                        center: 'title',
                                        right: 'agendaDay,agendaWeek,month'
                                    },
                                    defaultView: 'agendaDay',
                                    views: {
                                        agendaDay: {
                                            buttonText: 'Jour',
                                            slotLabelFormat: 'H:mm',
                                            slotLabelInterval: '01:00',
                                            slotLabel: function (date) {
                                                if (date.hour() >= 7 && date.hour() <= 19) {
                                                    return date.format('H:mm');
                                                }
                                                return '';
                                            }
                                        }
                                    },
                                    editable: true,
                                    events: response.events
                                });
                            } else {
                                console.error('Erreur lors du chargement des horaires des enfants.');
                            }
                        } else {
                            console.error('Aucun ID d\'enfant trouvé dans les événements.');
                        }
                    } else {
                        console.error('Erreur lors de la récupération des employés ou des événements.');
                    }
                } catch (error) {
                    console.error('Erreur lors de l\'initialisation : ' + error.message);
                }
            }

            function extractChildIdFromEvents(events) {
                let childId = null;
                events.forEach(event => {
                    console.log('Titre de l\'événement :', event.title);
                    const titleParts = event.title.split(':');
                    if (titleParts.length === 2 && titleParts[0].trim() === 'Garde') {
                        const eventId = parseInt(titleParts[1].trim(), 10);
                        if (!isNaN(eventId)) {
                            childId = eventId;
                        }
                    }
                });
                return childId;
            }

            initialize();
        });

        </script>          
    </body>
</html>


