<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="/style.css">
        <title>Creche Planning</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment-with-locales.min.js"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.css" />
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.js"></script>
        <script src="/com_serveur.js" defer></script>
        <script src="/popup.js" defer></script>
    </head>
    <body>

        <header>
            <nav class="navbar">
                <ul class="nav-list">
                    <a id="lien" href="/">Accueil</a>
                    <li id="lien" class="menu-deroulant"><a href="#">Planning</a>
                        <ul class="sous">
                            <a href="#"><span class="hover-underline-animation">Planning enfants</span></a>
                            <a href="#"><span class="hover-underline-animation">Planning employes</span></a>
                        </ul>
                    </li>
                    <% if (profile != undefined) { %>
                        <a id="lien" href="/employes">Employés</a>
                        <a id="lien" href="/enfants">Enfants</a>
                        <div id="profile-container" class="profile-container">
                            <p><%= profile.username %></p>
                            <div class="popup" id="popup" style="display: none;">
                                <a id="profil" href="/inventaire"><span class="hover-underline-animation">Profil</span></a>
                                <a id="deconnexion" href="#" onclick="decoProfile()"><span class="hover-underline-animation">Sign out</span></a>
                            </div>
                        </div>
                    <% } else { %>
                        <a id="lien" href="#">Employés</a>
                        <a id="lien" href="#">Enfants</a>
                        <div class="log-container">
                            <a id="loginButton" class="case-button">LogIn</a>
                        </div>
                    <% } %>
                </ul>
            </nav>
        </header>

        <!---------------------------- POPUP / SEARCHBAR -------------------------------------->
            
        <div class="inscription" style="display: none;" id="inscription">
            <form class="Formin" action="/register" method="post">
                <h1 class="title_creation">Inscrivez-vous</h1>

                <label for="username">Nom d'utilisateur :</label>
                <input type="text" id="username" name="username" required>
                
                <label for="password">Mot de passe :</label>
                <input type="password" id="password" name="password" required>
                
                <button class="button_submit" type="submit">S'inscrire</button>
            </form>
            <button id="closepopup">Fermer</button>
        </div>
        
        <div id="loginPopup" style="display: none;">
            <form id="loginForm" action="/login" method="post">
                <h1 class="title_creation">Connectez-vous</h1>
                <!-- Ajoutez les champs nécessaires pour le formulaire de connexion -->
                <label for="usernameLog">Nom d'utilisateur:</label>
                <input type="text" id="usernameLog" name="usernameLog" required>
                
                <label for="passwordLog">Mot de passe:</label>
                <input type="password" id="passwordLog" name="passwordLog" required>
                
                <button class="button_login"  type="submit">Se connecter</button>
                <a id="a_login" onclick="popUp()" href="#">Nouvel utilisateur inscrit toi</a>
            </form>
            <button id="closePopup">Fermer</button>
        </div>

        
        <div id="calendar-container">
            <div id="calendar"></div>
        </div>
        

        <script>
            function assignEmployeesToChildren(employees, childSchedules, events) {
                if (!employees || !Array.isArray(employees) || !childSchedules || !Array.isArray(childSchedules) || !events) {
                    console.error('Données d\'entrée invalides pour assignEmployeesToChildren');
                    return;
                }
                const assignedHours = {};
            
                // Créer un objet pour stocker le nombre d'heures déjà assignées à chaque employé pour la semaine
                const weeklyAssignedHours = {};
            
                // Fonction pour vérifier si un employé peut être assigné à une heure donnée
                function canAssignEmployee(employee, hour) {
                    if (!assignedHours[employee.id]) {
                        assignedHours[employee.id] = {};
                    }
            
                    if (!assignedHours[employee.id][hour]) {
                        assignedHours[employee.id][hour] = 0;
                    }
            
                    if (!weeklyAssignedHours[employee.id]) {
                        weeklyAssignedHours[employee.id] = 0;
                    }
            
                    // Vérifier le nombre d'heures maximum par semaine pour l'employé
                    if (weeklyAssignedHours[employee.id] + 1 <= employee.maxWeeklyHours) {
                        // Vérifier le nombre d'enfants déjà assignés à cette heure
                        if (assignedHours[employee.id][hour] < 3) {
                            assignedHours[employee.id][hour]++;
                            weeklyAssignedHours[employee.id]++;
                            return true;
                        }
                    }
            
                    return false;
                }
            
                events.forEach(event => {
                    const titleParts = event.title.split(':');
            
                    if (titleParts.length > 1) {
                        const childId = titleParts[1] ? titleParts[1].trim() : null;
            
                        if (childId) {
                            const childSchedule = childSchedules.find(schedule => schedule.child_id === parseInt(childId, 10));
            
                            if (childSchedule) {
                                const { daycareHoursStart, daycareHoursEnd } = childSchedule;
            
                                // Assigner les employés aux enfants en fonction des horaires de garde
                                employees.forEach(employee => {
                                    const startHour = moment().isoWeekday(childSchedule.dayOfWeek).hour(daycareHoursStart);
                                    const endHour = moment().isoWeekday(childSchedule.dayOfWeek).hour(daycareHoursEnd);
                                
                                    for (let hour = startHour; hour < endHour; hour++) {
                                        if (canAssignEmployee(employee, hour)) {
                                            event.start = moment().isoWeekday(childSchedule.dayOfWeek).hour(daycareHoursStart).toDate();
                                            event.end = moment().isoWeekday(childSchedule.dayOfWeek).hour(daycareHoursEnd).toDate();
                                            event.employeeId = employee.id; // Ajouter l'ID de l'employé à l'événement
                                            break;
                                        }
                                    }
                                });                                                                                                  
                            } else {
                                console.error('Aucun horaire de garde trouvé pour l\'enfant avec l\'ID ' + childId);
                            }
                        } else {
                            console.error('Le titre de l\'événement ne contient pas de childId valide.');
                        }
                    } else {
                        console.error('Le titre de l\'événement ne contient pas de séparateur ":".');
                    }
                });
            }

            $(document).ready(function () {
                var events = [];

                var employees = [];

                function extractChildIdFromEvents(events) {
                    let childId = null;
                
                    events.forEach(event => {
                        const titleParts = event.title.split(':');
                        if (titleParts.length === 2 && titleParts[0].trim() === 'Garde') {
                            const eventId = parseInt(titleParts[1].trim(), 10);
                            if (!isNaN(eventId)) {
                                childId = eventId;
                            }
                        }
                    });
                
                    return childId;
                }

                $.ajax({
                    type: 'GET',
                    url: '/employees',
                    success: function (response) {
                        if (response.success) {
                            employees = response.employees;

                            $.ajax({
                                type: 'GET',
                                url: '/planning',
                                success: function (response) {
                                    if (response.success) {
                                        events = response.events;
            
                                        const childId = extractChildIdFromEvents(events);
            
                                        if (childId) {
                                            $.ajax({
                                                url: '/childSchedules/' + childId,
                                                method: 'GET',
                                                success: function (childScheduleData) {
                                                    if (childScheduleData.success && Array.isArray(childScheduleData.childSchedules)) {
                                                        var childSchedules = childScheduleData.childSchedules;
            
                                                        childSchedules.forEach(childSchedule => {
                                                            var childEvent = {
                                                                title: `Garde: ${childSchedule.id}`,
                                                                start: moment().isoWeekday(childSchedule.dayOfWeek).set({ 'hour': childSchedule.daycareHoursStart }),
                                                                end: moment().isoWeekday(childSchedule.dayOfWeek).set({ 'hour': childSchedule.daycareHoursEnd }),
                                                                color: 'orange',
                                                            };
                                                            events.push(childEvent);
                                                        });
            
                                                        $('#calendar').fullCalendar('removeEvents');
            
                                                        assignEmployeesToChildren(employees, childSchedules, events);
            
                                                        $('#calendar').fullCalendar('rerenderEvents');
                                                    } else {
                                                        console.error('Erreur : Aucune donnée d\'horaire de garde d\'enfant disponible');
                                                    }
                                                },
                                                error: function (error) {
                                                    console.error('Erreur AJAX (Child Schedules) : ' + error.message);
                                                }
                                            });
                                        } else {
                                            console.error('Erreur : Aucun identifiant d\'enfant disponible');
                                        }
                                    } else {
                                        console.error('Erreur lors de la récupération des données de planning.');
                                    }
                                },
                                error: function (error) {
                                    console.error('Erreur AJAX (Planning) : ', error);
                                }
                            });
            
                            function updateCalendar() {
                                $('#calendar').fullCalendar('removeEvents');
                                $('#calendar').fullCalendar('rerenderEvents'); // Déplacez ceci avant 'addEventSource'
                                $('#calendar').fullCalendar('addEventSource', events);
                            }
                            
                        } else {
                            console.error('Erreur lors de la récupération des données des employés.');
                        }
                    },
                    error: function (error) {
                        console.error('Erreur AJAX (Employees) : ', error);
                    }
                });
            });   
        </script>            
    </body>
</html>


